name: Build Gutenberg Plugin Zip

on:
  pull_request:
    paths-ignore:
    - '**.md'
  push:
    branches: [trunk]
    paths-ignore:
    - '**.md'
  workflow_dispatch:
    inputs:
      version:
        description: 'rc or stable?'
        required: true

jobs:
  bump-version:
    name: Bump version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      old_version: ${{ steps.get_version.outputs.old_version }}
      new_version: ${{ steps.get_version.outputs.new_version }}
      release_branch: ${{ steps.get_version.outputs.release_branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Configure git user name and email
        run: |
            git config user.name "Gutenberg Repository Automation"
            git config user.email gutenberg@wordpress.org

      - name: Compute old and new version
        id: get_version
        run: |
          OLD_VERSION=$(jq --raw-output '.version' package.json)
          echo "::set-output name=old_version::$(echo $OLD_VERSION)"
          if [[ ${{ github.event.inputs.version }} == 'stable' ]]; then
            NEW_VERSION=$(npx semver $OLD_VERSION -i patch)
          else
            if [[ $OLD_VERSION == *"rc"* ]]; then
              NEW_VERSION=$(npx semver $OLD_VERSION -i prerelease)
            else
              # WordPress version guidelines: If minor is 9, bump major instead.
              IFS='.' read -r -a OLD_VERSION_ARRAY <<< "$OLD_VERSION"
              if [[ ${OLD_VERSION_ARRAY[1]} == "9" ]]; then
                NEW_VERSION="$(npx semver $OLD_VERSION -i major)-rc.1"
              else
                NEW_VERSION="$(npx semver $OLD_VERSION -i minor)-rc.1"
              fi
            fi
          fi
          echo "::set-output name=new_version::$(echo $NEW_VERSION)"
          IFS='.' read -r -a NEW_VERSION_ARRAY <<< "$NEW_VERSION"
          RELEASE_BRANCH="release/${NEW_VERSION_ARRAY[0]}.${NEW_VERSION_ARRAY[1]}"
          echo "::set-output name=release_branch::$(echo $RELEASE_BRANCH)"

      - name: Create release branch
        if: ${{ github.event.inputs.version == 'rc' && ! contains( steps.get_version.outputs.old_version, 'rc' ) }}
        run: git checkout -b "${{ steps.get_version.outputs.release_branch }}"

      - name: Update plugin version
        env:
          VERSION: ${{ steps.get_version.outputs.new_version }}
        run: |
          cat <<< $(jq --tab --arg version "${VERSION}" '.version = $version' package.json) > package.json
          cat <<< $(jq --tab --arg version "${VERSION}" '.version = $version' package-lock.json) > package-lock.json
          sed -i "s/${{ steps.get_version.outputs.old_version }}/${VERSION}/g" gutenberg.php
          sed -i "s/${{ steps.get_version.outputs.old_version }}/${VERSION}/g" readme.txt

      - name: Commit the version bump
        run: |
            git add gutenberg.php package.json package-lock.json readme.txt
            git commit -m "Bump plugin version to ${{ steps.get_version.outputs.new_version }}"
            git push --set-upstream origin "${{ steps.get_version.outputs.release_branch }}"

  build:
    name: Build Release Artifact
    runs-on: ubuntu-latest
    needs: bump-version
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.bump-version.outputs.release_branch || github.ref }}

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Build Gutenberg plugin ZIP file
        run: ./bin/build-plugin-zip.sh
        env:
          NO_CHECKS: 'true'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gutenberg-plugin
          path: ./gutenberg.zip

      - name: Build release notes draft
        if: github.event_name == 'workflow_dispatch'
        run: |
          IFS='.' read -r -a VERSION_ARRAY <<< "${{ needs.bump-version.outputs.new_version }}"
          MILESTONE="Gutenberg ${VERSION_ARRAY[0]}.${VERSION_ARRAY[1]}"
          npm run changelog -- --milestone="$MILESTONE" --unreleased > release-notes.txt
          sed -ie '1,6d' release-notes.txt

      - name: Upload release notes artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v2
        with:
          name: release-notes
          path: ./release-notes.txt

  create-release:
    name: Create Release Draft and Attach Asset
    needs: [bump-version, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Set Release Version
        id: get_release_version
        env:
          VERSION: ${{ needs.bump-version.outputs.new_version }}
        run: echo ::set-output name=version::$(echo $VERSION | cut -d / -f 3 | sed 's/-rc./ RC/' )

      - name: Download Plugin Zip Artifact
        uses: actions/download-artifact@v2
        with:
          name: gutenberg-plugin

      - name: Download Release Notes Artifact
        uses: actions/download-artifact@v2
        with:
          name: release-notes

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ needs.bump-version.outputs.new_version }}"
          release_name: ${{ steps.get_release_version.outputs.version }}
          draft: true
          prerelease: ${{ contains(needs.bump-version.outputs.new_version, 'rc') }}
          body_path: release-notes.txt

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gutenberg.zip
          asset_name: gutenberg.zip
          asset_content_type: application/zip
